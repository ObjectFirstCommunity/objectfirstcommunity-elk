input {
  tcp {
    port => 5044
    type => "syslog"
  }
  udp {
    port => 5044
    type => "syslog"
  }
}

filter {
  if [type] == "syslog" {
    grok {
      match => [
        # RFC5424 format with structured data
        "message", "<%{POSINT:syslog_pri}>%{POSINT:syslog_version} %{TIMESTAMP_ISO8601:syslog_timestamp} %{HOSTNAME:syslog_hostname} %{DATA:syslog_program} %{DATA:syslog_procid} %{DATA:syslog_msgid} %{DATA:syslog_sd} %{GREEDYDATA:syslog_message}",
        # RFC5424 format without structured data
        "message", "<%{POSINT:syslog_pri}>%{POSINT:syslog_version} %{TIMESTAMP_ISO8601:syslog_timestamp} %{HOSTNAME:syslog_hostname} %{DATA:syslog_program} %{DATA:syslog_procid} %{DATA:syslog_msgid} - %{GREEDYDATA:syslog_message}"
      ]
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }

    # Parse timestamp for RFC5424
    date {
      match => [ "syslog_timestamp", "ISO8601" ]
      target => "@timestamp"
    }

    # Parse severity and facility from syslog_pri
    syslog_pri {
    }

    # Override log.syslog.severity based on syslog_pri
    if [syslog_pri] == "10" {
      mutate {
        update => {
          "[log][syslog][severity][name]" => "critical"
          "[log][syslog][severity][code]" => 2
        }
      }
    }
    else if [syslog_pri] == "11" {
      mutate {
        update => {
          "[log][syslog][severity][name]" => "error"
          "[log][syslog][severity][code]" => 3
        }
      }
    }
    else if [syslog_pri] == "12" {
      mutate {
        update => {
          "[log][syslog][severity][name]" => "warning"
          "[log][syslog][severity][code]" => 4
        }
      }
    }

    # Handle <feff> BOM marker in messages
    if [syslog_message] =~ "<feff>" {
      mutate {
        gsub => [
          "syslog_message", "<feff>", ""
        ]
      }
    }

    # Clean up any BOM at the start of the message
    mutate {
      gsub => [
        "syslog_message", "^\uFEFF", ""
      ]
    }

    # Extract Event ID and other fields from syslog_message
    grok {
      match => [
        "syslog_message", ".*EventId=\"(%{NUMBER:event_id:int})\".*",
        "syslog_message", "Event ID:?\s*%{NUMBER:event_id:int}\s+(?<message>.*)",
        "syslog_message", "(?<event_id>[0-9]{4})\s+(?<message>.*)"
      ]
      tag_on_failure => ["no_event_id"]
      remove_field => ["message"]
    }

    # Extract username from various formats
    grok {
      match => [
        "syslog_message", ".*Username=\"(?<username>[^\"]+)\".*",
        "syslog_message", ".*User '(?<username>[^']+)'.*",
        "syslog_message", ".*user '(?<username>[^']+)'.*",
        "syslog_message", ".*user \"(?<username>[^\"]+)\".*"
      ]
      tag_on_failure => ["no_username_match"]
    }

    # Extract source component based on Event ID ranges
    if [event_id] {
      ruby {
        code => "
          event_id = event.get('event_id')
          if event_id
            event_id = event_id.to_i
            if event_id >= 2000 && event_id < 3000
              if event_id >= 2010 && event_id < 2500
                event.set('source_component', 'Management Service')
              elsif event_id >= 2500 && event_id < 2600
                event.set('source_component', 'Alerts')
              elsif event_id >= 2600 && event_id < 2700
                event.set('source_component', 'Alert Resolutions')
              end
            elsif event_id >= 1000 && event_id < 2000
              event.set('source_component', 'Service Monitor')
            elsif event_id >= 5000 && event_id < 7000
              event.set('source_component', 'S3 Service')
            end
          end
        "
      }
    }

    # Extract severity if not already available from syslog_severity
    if ![severity] and [syslog_message] =~ /Critical|Error|Warning|Information|Info/ {
      grok {
        match => [
          "syslog_message", ".*\t%{WORD:severity}\t.*"
        ]
      }
    }

    # Normalize severity terms
    if [severity] {
      mutate {
        gsub => [
          "severity", "Info", "Information",
          "severity", "Warning", "Warning",
          "severity", "Error", "Error",
          "severity", "Critical", "Critical"
        ]
      }
    }

    # Extract node name
    if [syslog_message] =~ /node|cluster node/ {
      grok {
        match => [
          "syslog_message", ".*node \"(?<node_name>[^\"]+)\".*",
          "syslog_message", ".*cluster node \"(?<node_name>[^\"]+)\".*"
        ]
        tag_on_failure => ["no_node_match"]
      }
    }

    # Extract service name
    if [syslog_message] =~ /Service/ {
      grok {
        match => [
          "syslog_message", ".*Service \"(?<service_name>[^\"]+)\".*",
          "syslog_message", ".* (?<service_name>[^ ]+) Service .*"
        ]
        tag_on_failure => ["no_service_match"]
      }
    }

    # Extract RAID information
    if [syslog_message] =~ /RAID/ {
      grok {
        match => [
          "syslog_message", ".*RAID array \"(?<raid_name>[^\"]+)\".*",
          "syslog_message", ".*System RAID \\((?<raid_name>[^\\)]+)\\).*"
        ]
        tag_on_failure => ["no_raid_match"]
      }
    }

    # Extract disk information
    if [syslog_message] =~ /drive|disk/ {
      grok {
        match => [
          "syslog_message", ".*drive \"(?<disk_name>[^\"]+)\".*in slot \"(?<disk_slot>[^\"]+)\".*",
          "syslog_message", ".*drive \"(?<disk_name>[^\"]+)\".*in bay \"(?<disk_bay>[^\"]+)\".*",
          "syslog_message", ".*disk \"(?<disk_name>[^\"]+)\".*"
        ]
        tag_on_failure => ["no_disk_match"]
      }
    }

    # Extract network adapter information
    if [syslog_message] =~ /adapter|network/ {
      grok {
        match => [
          "syslog_message", ".*adapter \"(?<adapter_name>[^\"]+)\".*"
        ]
        tag_on_failure => ["no_adapter_match"]
      }
    }

    # Extract S3 bucket information
    if [syslog_message] =~ /bucket/ {
      grok {
        match => [
          "syslog_message", ".*bucket \"(?<bucket_name>[^\"]+)\".*",
          "syslog_message", ".*bucket (?<bucket_name>[^ ]+) .*"
        ]
        tag_on_failure => ["no_bucket_match"]
      }
    }

    # Extract access key information
    if [syslog_message] =~ /Access Key|access key/ {
      grok {
        match => [
          "syslog_message", ".*S3 Access Key \"(?<access_key_id>[^\"]+)\".*",
          "syslog_message", ".*access key '(?<access_key_id>[^']+)'.*"
        ]
        tag_on_failure => ["no_access_key_match"]
      }
    }

    # Extract user information
    if [syslog_message] =~ /user/ {
      grok {
        match => [
          "syslog_message", ".*user '(?<user>[^']+)'.*",
          "syslog_message", ".*user \"(?<user>[^\"]+)\".*"
        ]
        tag_on_failure => ["no_user_match"]
      }
    }

    # Extract IP information
    if [syslog_message] =~ /IP/ {
      grok {
        match => [
          "syslog_message", ".*IP '(?<ip>[^']+)'.*"
        ]
        tag_on_failure => ["no_ip_match"]
      }
    }

    # Extract error details
    if [syslog_message] =~ /Error details|error/ {
      grok {
        match => [
          "syslog_message", ".*Error details: \"(?<error_details>[^\"]+)\".*",
          "syslog_message", ".*Error: \"(?<error_details>[^\"]+)\".*",
          "syslog_message", ".*error(:|s:) (?<error_details>[^\\.]*)\\.*"
        ]
        tag_on_failure => ["no_error_match"]
      }
    }
  }
}
output {
  elasticsearch {
    hosts => ["localhost:9200"]
    user => "elastic"
    password => $ELASTIC_PASSWORD
    ssl => true
    ssl_certificate_verification => false
    index => "syslog-%{+YYYY.MM.dd}"
  }
  # Uncomment for debugging
  stdout { codec => rubydebug }